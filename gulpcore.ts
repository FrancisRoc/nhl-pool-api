//==========================================
// Gulp tasks
//
// This file will be transpiled and included
// by the standard Gulp file "gulpfile.js".
//==========================================

import { configs } from "./config/configs";
import { startServer } from "./src/server";
import { createLogger } from "./src/utils/logger";
import { utils } from "./src/utils/utils";
import { createDefaultApp } from "./src/app";
import { validateApp } from "./src/utils/appValidator";
import { configureOpenApi } from "./open-api/openApiConfigurer";
import * as express from "express";
import * as gulp from "gulp";
import * as del from "del";
import * as glob from "glob";
import * as fs from "fs";
let cucumber = require("gulp-cucumber");
let nodemon = require("gulp-nodemon");
let execSync = require("child_process").execSync;
let logger = createLogger("gulpcore");
import { EndpointTypes } from "./config/constants";
import * as taskCallBack from "run-sequence";

//==========================================
// Manages unhandled promises rejections
//==========================================
process.on('unhandledRejection', (reason: any, p: any) => {
    logger.error("Promise rejection error : " + reason);
});

//==========================================
// Manages uncaught exceptions.
//
// If you are thinking about modifying this function,
// make sure you read :
// https://nodejs.org/api/process.html#process_warning_using_uncaughtexception_correctly
//
//==========================================
process.on('uncaughtException', (err: any) => {

    try {
        logger.error("An uncaught exception occured : " + err);
    } finally {
        process.exit(1);
    }
});

/**
 * Runs a task and return a Promise.
 */
async function taskPromisified(task: string) {

    if (!task) {
        return;
    }
    return new Promise(function (resolve, reject) {
        taskCallBack(task, (err: any) => {
            if (err) {
                reject();
            } else {
                resolve();
            }
        });
    });
}

/**
 * Runs a sequence of task and return a Promise.
 */
async function sequence(...tasks: string[]) {

    if (!tasks) {
        return;
    }

    for (let task of tasks) {
        await taskPromisified(task);
    }
}

//==========================================
// Default task
//==========================================
gulp.task("default", function () {
    console.log("Default Gulp task. Current env : " + configs.environment.type);
});

//==========================================
// Clean .js and .js.map generated by
// transpilation.
//==========================================
let filterjs = function (file: string) {
    return file.replace(/.ts$/, ".js");
};
let filterjsmap = function (file: string) {
    return file.replace(/.ts$/, ".js.map");
};
gulp.task("clean", function () {
    return glob("./**/*.ts", function (err, files) {
        del(files.map(filterjs)).then(() => {
            return del(files.map(filterjsmap));
        }).then(() => {
            console.log("Cleanup done...");
        });
    });
});

//==========================================
// Launch the application
//==========================================
gulp.task("start", function () {
    startServer();
});

//==========================================
// Exits the application
//
// This is useful to launch a Gulp task and ends
// the process, for example for a "F5" in VSCode.
//==========================================
gulp.task("exit", function () {
    process.exit(0);
});

//==========================================
// Tests - Features
//==========================================
gulp.task("test-features", function () {

    //==========================================
    // Flag that we are currently running tests.
    //==========================================
    process.env.gulpTesting = true;

    return gulp.src("tests/features/*").pipe(cucumber({
    }));
});

//==========================================
// Tests - Load
//

//==========================================
gulp.task("test-load", async function () {

    //==========================================
    // Flag that we are currently running tests.
    //==========================================
    process.env.gulpTesting = true;

    //==========================================
    // Starts the server
    //==========================================
    await startServer();

    //==========================================
    // Replaces the "${HOST}" and "${PORT}" in the
    // Artillery config file...
    //==========================================
    let content: string = fs.readFileSync(`${configs.root}/tests/load/artillery.yaml`, "utf-8");
    content = content.replace("${SCHEME}", "http");
    content = content.replace("${HOST}", "localhost");
    content = content.replace("${PORT}", configs.server.port + "");
    let fileTmpPath = `${configs.testDataDir}/artillery-config.yaml`;
    fs.writeFileSync(fileTmpPath, content, "utf-8");

    let logFilePath = `${configs.testDataDir}/artillery-results.json`;

    //==========================================
    // Runs Artillery
    //==========================================
    await utils.execPromisified("node", [`${configs.root}/node_modules/artillery/bin/artillery`, "run", "--output", logFilePath, fileTmpPath]);
    process.exit(0);
});

//==========================================
// Debug task
//==========================================
gulp.task("debug", function () {
    gulp.watch(["./*.ts", "./!(node_modules)/**/*.ts"], () => {
        console.log("Compilation...");
        execSync("\"node_modules/.bin/tsc\"", { stdio: [0, 1, 2] });
        console.log("Compilation done.");
    });
    let stream = nodemon({
        "script": `${configs.root}/src/start.js`,
        "nodeArgs": [`--debug=${configs.debug.host}:${configs.debug.port}`, "--nolazy"],
        "ext": "js",
        "restartable": true
    });
});

//==========================================
// Serves the Swagger editor only
//==========================================
gulp.task("editor", function () {

    if (configs.openApi.exposeSwaggerEditor) {
        let app = express();
        configureOpenApi(app, true, true, false, configs.server.swaggerEditorAlonePort);

        app.listen(configs.server.swaggerEditorAlonePort, function () {

            let swaggerEditorAloneUrl = utils.createPublicUrl(configs.routing.routes.openAPI.editor,
                EndpointTypes.DOCUMENTATION,
                configs.server.swaggerEditorAlonePort);

            console.log(`\n==========================================`);
            console.log(`Swagger editor running...\n`);
            console.log(`${swaggerEditorAloneUrl}`);
            console.log(`==========================================\n`);
        });
    } else {
        console.log(`The Swagger editor is disable.`);
    }
});

//==========================================
// Tests everything :
// - TSLint
// - Application validation
// - Integration/unit Tests
//==========================================
gulp.task("test", async function () {

    await sequence("tslint", "validate", "test-units");

    console.log(`\n==========================================`);
    console.log(`All tests and validations passed!`);
    console.log(`==========================================\n`);
    process.exit(0);
});

//==========================================
// Tests - units and integration
//
// Will find all files ending in ".test.js" under the
// "src" and the "tests" folders.
//==========================================
gulp.task("test-units", async function () {

    //==========================================
    // Flag that we are currently running tests.
    //==========================================
    process.env.gulpTesting = true;

    try {
        await utils.execPromisified("node", [`${configs.root}/node_modules/mocha/bin/_mocha`, `${configs.root}/src/**/*.test.js`, `${configs.root}/tests/**/*.test.js`]);
        console.log("All unit/Integration tests done.");
    } catch (err) {
        console.log("Some unit/integration tests failed.");
        process.exit(1);
    }
});

//==========================================
// Validates the application
//==========================================
gulp.task("validate", async function () {

    let app = await createDefaultApp();
    return validateApp(app)
        .then(() => logger.info("The application is valid!"))
        .catch((err: any) => {
            logger.error(err);
            process.exit(1);
        });
});

//==========================================
// TSLint validation
//==========================================
gulp.task("tslint", async function () {

    try {
        await utils.execPromisified("node", [`${configs.root}/node_modules/tslint/bin/tslint`, `--type-check`, `--project`, `${configs.root}/tsconfig.json`]);
        console.log("TSLint passed!");
    } catch (err) {
        console.error("\nTSLint failed.");
        process.exit(1);
    }

});
