//==========================================
// Gulp tasks
//
// This file will be transpiled and included
// by the standard Gulp file "gulpfile.js".
//==========================================
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const configs_1 = require("./config/configs");
const server_1 = require("./src/server");
const logger_1 = require("./src/utils/logger");
const utils_1 = require("./src/utils/utils");
const app_1 = require("./src/app");
const appValidator_1 = require("./src/utils/appValidator");
const openApiConfigurer_1 = require("./open-api/openApiConfigurer");
const express = require("express");
const gulp = require("gulp");
const del = require("del");
const glob = require("glob");
const fs = require("fs");
let cucumber = require("gulp-cucumber");
let nodemon = require("gulp-nodemon");
let execSync = require("child_process").execSync;
let logger = logger_1.createLogger("gulpcore");
const constants_1 = require("./config/constants");
const taskCallBack = require("run-sequence");
//==========================================
// Manages unhandled promises rejections
//==========================================
process.on('unhandledRejection', (reason, p) => {
    logger.error("Promise rejection error : " + reason);
});
//==========================================
// Manages uncaught exceptions.
//
// If you are thinking about modifying this function,
// make sure you read :
// https://nodejs.org/api/process.html#process_warning_using_uncaughtexception_correctly
//
//==========================================
process.on('uncaughtException', (err) => {
    try {
        logger.error("An uncaught exception occured : " + err);
    }
    finally {
        process.exit(1);
    }
});
/**
 * Runs a task and return a Promise.
 */
function taskPromisified(task) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!task) {
            return;
        }
        return new Promise(function (resolve, reject) {
            taskCallBack(task, (err) => {
                if (err) {
                    reject();
                }
                else {
                    resolve();
                }
            });
        });
    });
}
/**
 * Runs a sequence of task and return a Promise.
 */
function sequence(...tasks) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tasks) {
            return;
        }
        for (let task of tasks) {
            yield taskPromisified(task);
        }
    });
}
//==========================================
// Default task
//==========================================
gulp.task("default", function () {
    console.log("Default Gulp task. Current env : " + configs_1.configs.environment.type);
});
//==========================================
// Clean .js and .js.map generated by
// transpilation.
//==========================================
let filterjs = function (file) {
    return file.replace(/.ts$/, ".js");
};
let filterjsmap = function (file) {
    return file.replace(/.ts$/, ".js.map");
};
gulp.task("clean", function () {
    return glob("./**/*.ts", function (err, files) {
        del(files.map(filterjs)).then(() => {
            return del(files.map(filterjsmap));
        }).then(() => {
            console.log("Cleanup done...");
        });
    });
});
//==========================================
// Launch the application
//==========================================
gulp.task("start", function () {
    server_1.startServer();
});
//==========================================
// Exits the application
//
// This is useful to launch a Gulp task and ends
// the process, for example for a "F5" in VSCode.
//==========================================
gulp.task("exit", function () {
    process.exit(0);
});
//==========================================
// Tests - Features
//==========================================
gulp.task("test-features", function () {
    //==========================================
    // Flag that we are currently running tests.
    //==========================================
    process.env.gulpTesting = true;
    return gulp.src("tests/features/*").pipe(cucumber({}));
});
//==========================================
// Tests - Load
//
//==========================================
gulp.task("test-load", function () {
    return __awaiter(this, void 0, void 0, function* () {
        //==========================================
        // Flag that we are currently running tests.
        //==========================================
        process.env.gulpTesting = true;
        //==========================================
        // Starts the server
        //==========================================
        yield server_1.startServer();
        //==========================================
        // Replaces the "${HOST}" and "${PORT}" in the
        // Artillery config file...
        //==========================================
        let content = fs.readFileSync(`${configs_1.configs.root}/tests/load/artillery.yaml`, "utf-8");
        content = content.replace("${SCHEME}", "http");
        content = content.replace("${HOST}", "localhost");
        content = content.replace("${PORT}", configs_1.configs.server.port + "");
        let fileTmpPath = `${configs_1.configs.testDataDir}/artillery-config.yaml`;
        fs.writeFileSync(fileTmpPath, content, "utf-8");
        let logFilePath = `${configs_1.configs.testDataDir}/artillery-results.json`;
        //==========================================
        // Runs Artillery
        //==========================================
        yield utils_1.utils.execPromisified("node", [`${configs_1.configs.root}/node_modules/artillery/bin/artillery`, "run", "--output", logFilePath, fileTmpPath]);
        process.exit(0);
    });
});
//==========================================
// Debug task
//==========================================
gulp.task("debug", function () {
    gulp.watch(["./*.ts", "./!(node_modules)/**/*.ts"], () => {
        console.log("Compilation...");
        execSync("\"node_modules/.bin/tsc\"", { stdio: [0, 1, 2] });
        console.log("Compilation done.");
    });
    let stream = nodemon({
        "script": `${configs_1.configs.root}/src/start.js`,
        "nodeArgs": [`--debug=${configs_1.configs.debug.host}:${configs_1.configs.debug.port}`, "--nolazy"],
        "ext": "js",
        "restartable": true
    });
});
//==========================================
// Serves the Swagger editor only
//==========================================
gulp.task("editor", function () {
    if (configs_1.configs.openApi.exposeSwaggerEditor) {
        let app = express();
        openApiConfigurer_1.configureOpenApi(app, true, true, false, configs_1.configs.server.swaggerEditorAlonePort);
        app.listen(configs_1.configs.server.swaggerEditorAlonePort, function () {
            let swaggerEditorAloneUrl = utils_1.utils.createPublicUrl(configs_1.configs.routing.routes.openAPI.editor, constants_1.EndpointTypes.DOCUMENTATION, configs_1.configs.server.swaggerEditorAlonePort);
            console.log(`\n==========================================`);
            console.log(`Swagger editor running...\n`);
            console.log(`${swaggerEditorAloneUrl}`);
            console.log(`==========================================\n`);
        });
    }
    else {
        console.log(`The Swagger editor is disable.`);
    }
});
//==========================================
// Tests everything :
// - TSLint
// - Application validation
// - Integration/unit Tests
//==========================================
gulp.task("test", function () {
    return __awaiter(this, void 0, void 0, function* () {
        yield sequence("tslint", "validate", "test-units");
        console.log(`\n==========================================`);
        console.log(`All tests and validations passed!`);
        console.log(`==========================================\n`);
        process.exit(0);
    });
});
//==========================================
// Tests - units and integration
//
// Will find all files ending in ".test.js" under the
// "src" and the "tests" folders.
//==========================================
gulp.task("test-units", function () {
    return __awaiter(this, void 0, void 0, function* () {
        //==========================================
        // Flag that we are currently running tests.
        //==========================================
        process.env.gulpTesting = true;
        try {
            yield utils_1.utils.execPromisified("node", [`${configs_1.configs.root}/node_modules/mocha/bin/_mocha`, `${configs_1.configs.root}/src/**/*.test.js`, `${configs_1.configs.root}/tests/**/*.test.js`]);
            console.log("All unit/Integration tests done.");
        }
        catch (err) {
            console.log("Some unit/integration tests failed.");
            process.exit(1);
        }
    });
});
//==========================================
// Validates the application
//==========================================
gulp.task("validate", function () {
    return __awaiter(this, void 0, void 0, function* () {
        let app = yield app_1.createDefaultApp();
        return appValidator_1.validateApp(app)
            .then(() => logger.info("The application is valid!"))
            .catch((err) => {
            logger.error(err);
            process.exit(1);
        });
    });
});
//==========================================
// TSLint validation
//==========================================
gulp.task("tslint", function () {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield utils_1.utils.execPromisified("node", [`${configs_1.configs.root}/node_modules/tslint/bin/tslint`, `--type-check`, `--project`, `${configs_1.configs.root}/tsconfig.json`]);
            console.log("TSLint passed!");
        }
        catch (err) {
            console.error("\nTSLint failed.");
            process.exit(1);
        }
    });
});
//# sourceMappingURL=gulpcore.js.map